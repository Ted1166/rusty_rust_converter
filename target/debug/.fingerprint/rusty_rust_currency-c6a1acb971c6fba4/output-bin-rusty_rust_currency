{"message":"expected type, found module `self`","code":{"code":"E0573","explanation":"Something other than a type has been used when one was expected.\n\nErroneous code examples:\n\n```compile_fail,E0573\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon::Born { // error!\n    Dragon::Born\n}\n\nconst HOBBIT: u32 = 2;\nimpl HOBBIT {} // error!\n\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(_: Wizard::Saruman); // error!\n}\n```\n\nIn all these errors, a type was expected. For example, in the first error, if\nwe want to return the `Born` variant from the `Dragon` enum, we must set the\nfunction to return the enum and not its variant:\n\n```\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon { // ok!\n    Dragon::Born\n}\n```\n\nIn the second error, you can't implement something on an item, only on types.\nWe would need to create a new type if we wanted to do something similar:\n\n```\nstruct Hobbit(u32); // we create a new type\n\nconst HOBBIT: Hobbit = Hobbit(2);\nimpl Hobbit {} // ok!\n```\n\nIn the third case, we tried to only expect one variant of the `Wizard` enum,\nwhich is not possible. To make this work, we need to using pattern matching\nover the `Wizard` enum:\n\n```\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(w: Wizard) { // ok!\n        match w {\n            Wizard::Saruman => {\n                // do something\n            }\n            _ => {} // ignore everything else\n        }\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src\\Calculator.rs","byte_start":65,"byte_end":69,"line_start":4,"line_end":4,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"    pub fn new() -> self{","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a self type with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src\\Calculator.rs","byte_start":65,"byte_end":69,"line_start":4,"line_end":4,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"    pub fn new() -> self{","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"Self","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0573]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected type, found module `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\Calculator.rs:4:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    pub fn new() -> self{\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a self type with a similar name exists (notice the capitalization): `Self`\u001b[0m\n\n"}
{"message":"expected struct, variant or union type, found module `self`","code":{"code":"E0574","explanation":"Something other than a struct, variant or union has been used when one was\nexpected.\n\nErroneous code example:\n\n```compile_fail,E0574\nmod Mordor {}\n\nlet sauron = Mordor { x: () }; // error!\n\nenum Jak {\n    Daxter { i: isize },\n}\n\nlet eco = Jak::Daxter { i: 1 };\nmatch eco {\n    Jak { i } => {} // error!\n}\n```\n\nIn all these errors, a type was expected. For example, in the first error,\nwe tried to instantiate the `Mordor` module, which is impossible. If you want\nto instantiate a type inside a module, you can do it as follow:\n\n```\nmod Mordor {\n    pub struct TheRing {\n        pub x: usize,\n    }\n}\n\nlet sauron = Mordor::TheRing { x: 1 }; // ok!\n```\n\nIn the second error, we tried to bind the `Jak` enum directly, which is not\npossible: you can only bind one of its variants. To do so:\n\n```\nenum Jak {\n    Daxter { i: isize },\n}\n\nlet eco = Jak::Daxter { i: 1 };\nmatch eco {\n    Jak::Daxter { i } => {} // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src\\Calculator.rs","byte_start":80,"byte_end":84,"line_start":5,"line_end":5,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"        self{","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a self type with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src\\Calculator.rs","byte_start":80,"byte_end":84,"line_start":5,"line_end":5,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"        self{","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"Self","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0574]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected struct, variant or union type, found module `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\Calculator.rs:5:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        self{\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a self type with a similar name exists (notice the capitalization): `Self`\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0573, E0574.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0573, E0574.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0573`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0573`.\u001b[0m\n"}
